{"paragraphs":[{"text":"%pyspark\nimport csv\nimport pandas as pd\nimport json\n\n# file_path = \"/Users/camallen/Desktop/spark_tutorial/example_data/new-project-uq-classifications.csv\"\nfile_path = \"/Users/camallen/Desktop/spark_tutorial/example_data/cut_down_snapsatsea.csv\"\n\nraw_csv_data = sc.emptyRDD()\n\n# the memory parameter is because this is a big file and some of the columns take a bit more processing, so I'm telling pandas not to take a shortcut\nclassifications = pd.read_csv(file_path, low_memory=False)\n# convert the annotations to json\nclassifications['annotations'] = [json.loads(anno) for anno in classifications.annotations]\nclassifications['yes_no'] = [ 0 if anno[0]['value'].startswith('No') else 1 for anno in classifications.annotations]\nclassifications['metadata'] = [json.loads(meta) for meta in classifications.metadata]\n# store the major workflow versions\nclassifications['workflow_major'] = classifications.workflow_version.astype(int)\n# csv_data_df = sqlContext.createDataFrame(classifications)\n\n# convert the data frame to an RDD\ncsv_data_rdd = csv_data_df.rdd\n# and see some data\nprint(\"Total rows: %d\" % csv_data_rdd.count())\nsample = csv_data_rdd.sample(False,1, 12345).first()\n# print sample.annotations[0]['value']\nprint sample.created_at\nprint type(sample.created_at)\n\nprint(\"Example row data:\")\nfor k, v in sample.asDict().items():\n    print(\"%s, %s\" % (k, v))","user":"anonymous","dateUpdated":"2017-06-21T12:26:21+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Total rows: 5000\n2016-04-20 21:57:33 UTC\n<type 'unicode'>\nExample row data:\nclassification_id, 11489039\nyes_no, 0\nuser_id, 1475551.0\nexpert, nan\nworkflow_major, 4\nworkflow_name, -. Is there more than one whale or dolphin in this photo?\nannotations, [{u'task': u'init', u'task_label': u'Is there more than one whale or dolphin in this photo?', u'value': u'No, just one'}]\nuser_ip, 32068e4b3d793b60367d\nworkflow_id, 566\ngold_standard, nan\nsubject_ids, 1513299\nsubject_data, {\"1513299\":{\"retired\":{\"id\":1867768,\"workflow_id\":566,\"classifications_count\":10,\"created_at\":\"2016-04-18T19:15:47.721Z\",\"updated_at\":\"2016-04-21T18:00:08.483Z\",\"retired_at\":\"2016-04-21T18:00:08.483Z\",\"subject_id\":1513299,\"retirement_reason\":null},\"Filename\":\"20150108-KSpencer-2398.jpg\"}}\nuser_name, Sidonkey\ncreated_at, 2016-04-20 21:57:33 UTC\nworkflow_version, 4.23\nmetadata, {u'utc_offset': u'-19800', u'finished_at': u'2016-04-20T21:57:31.509Z', u'live_project': u'true', u'subject_dimensions': u'[{naturalHeight=640, clientWidth=398, clientHeight=266, naturalWidth=960}]', u'session': u'99cebea78e6d3b1d078f57129a934f4ac82b404bac1f8dd2138893ffeb89abfe', u'user_agent': u'Mozilla/5.0 (Linux; Android 5.0; Micromax A107 Build/LRX21M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.91 Mobile Safari/537.36', u'user_language': u'en', u'user_group_ids': u'[]', u'started_at': u'2016-04-20T21:57:19.541Z', u'viewport': u'{width=320, height=544}'}\n"}]},"apps":[],"jobName":"paragraph_1497955290404_362203169","id":"20170620-114130_1867480236","dateCreated":"2017-06-20T11:41:30+0100","dateStarted":"2017-06-21T12:26:21+0100","dateFinished":"2017-06-21T12:26:22+0100","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2091"},{"text":"%pyspark\nfrom operator import add\n\n# count user classifications\n# user_counts = csv_data_rdd.map(lambda e: (e.user_name, 1)).reduceByKey(lambda user, count: user + count).countByValue()\n# user_counts_rdd = csv_data_rdd.map(lambda e: (e.user_name, 1)).reduceByKey(add)\n# print user_counts_rdd.take(10)\n\n# user_counts = csv_data_rdd.map(lambda e: e.user_name).countByValue().items()\n# print type(user_counts)\n\n# print(\"per user classifcation counts\")\n# for name, count in user_counts:\n#     print(\"%s: %s\" % (name, count))\n\n# print(\"%table\\nname\\tcounts\")\n# for name, counts in user_counts:\n#     print(\"%s\\t%d\" % (name, counts))\n\n# create a histogram using spark\nhistogram = csv_data_rdd.map(lambda e: (e.user_name, 1)).reduceByKey(lambda user, count: user + count).values().histogram(10)\nuser_counts = zip(histogram[0], histogram[1])\n# print user_counts\n\nprint(\"%table\\nbin\\tcounts\")\nfor bin, counts in user_counts:\n    print(\"%d\\t%d\" % (bin, counts))","user":"anonymous","dateUpdated":"2017-06-21T12:26:53+0100","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"multiBarChart":{"stacked":true}},"commonSetting":{},"keys":[{"name":"bin","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"counts","index":1,"aggr":"sum"}]},"helium":{}},"1":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"multiBarChart":{"stacked":false}},"commonSetting":{},"keys":[{"name":"name","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"size","index":1,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"bin\tcounts\n1\t1850\n14\t29\n28\t5\n42\t2\n55\t0\n69\t2\n83\t1\n96\t1\n110\t0\n124\t1\n"}]},"apps":[],"jobName":"paragraph_1497955376348_-1649573854","id":"20170620-114256_215538785","dateCreated":"2017-06-20T11:42:56+0100","dateStarted":"2017-06-21T12:26:54+0100","dateFinished":"2017-06-21T12:26:54+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2092"},{"text":"%pyspark\n# filter by major workflow only\n# workflow_version_counts = csv_data_rdd.map(lambda e: (e.workflow_major, 1)).reduceByKey(lambda ver, count: ver + count).collect()\n# print(\"workflow major version classifcation counts\")\n# for name, count in workflow_version_counts:\n#     print(\"%s: %d\" % (name, count))\n\n# figure out which workflow major version we should be looking for.\n# workflow_id_counts = csv_data_rdd.map(lambda e: e.workflow_id).countByValue().items()\nworkflow_id_counts = csv_data_rdd.map(lambda e: (e.workflow_id, e.workflow_major)).distinct().collect()\n\nprint(\"workflow version classifcation counts\")\nfor id, count in workflow_id_counts:\n    print(\"%s: %d\" % (id, count))\n    \n# print(\"%table\\nname\\tsize\")\n# for name, count in workflow_version_counts:\n#     print(\"%d\\t%d\" % (name, count))\n    \n# take classifications only for 505 with major version 4\nmajor_ver = 4\ncurr_workflow_id = 505\nlatest_classifications = csv_data_rdd \\\n    .filter(lambda e: e.workflow_id == curr_workflow_id) \\\n    .filter(lambda e: e.workflow_major == major_ver)\nprint \"%d classifications for workflow id %s, version %s\" % (latest_classifications.count(), curr_workflow_id, major_ver)\n","user":"anonymous","dateUpdated":"2017-06-21T12:27:31+0100","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false},"helium":{}},"1":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false},"helium":{}}},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"workflow version classifcation counts\n566: 4\n506: 4\n433: 2\n433: 3\n504: 4\n504: 3\n427: 6\n505: 4\n702 classifications for workflow id 505, version 4\n"}]},"apps":[],"jobName":"paragraph_1497963479294_-424366508","id":"20170620-135759_339621181","dateCreated":"2017-06-20T13:57:59+0100","dateStarted":"2017-06-21T12:27:31+0100","dateFinished":"2017-06-21T12:27:32+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2093"},{"text":"%pyspark\n\n# figure out latest cutoff (Credits to Ali - http://rpubs.com/aliburchard/279154)\nfrom dateutil import parser\n\ncounts_by_date = latest_classifications \\\n    .sortBy(lambda e: e.created_at) \\\n    .map(lambda e: parser.parse(e.created_at).strftime('%Y-%m')) \\\n    .countByValue()\n\nprint(\"%table\\ndate\\tcounts\")\nfor date, counts in counts_by_date.items():\n    print(\"%s\\t%d\" % (date, counts))\n","user":"anonymous","dateUpdated":"2017-06-21T12:28:17+0100","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"lineChart":{"forceY":true}},"commonSetting":{},"keys":[{"name":"date","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"counts","index":1,"aggr":"sum"}]},"helium":{}},"1":{"graph":{"mode":"table","height":300,"optionOpen":false},"helium":{}}},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"date\tcounts\n2016-06\t95\n2016-05\t118\n2016-11\t292\n2016-12\t50\n2017-05\t147\n"}]},"apps":[],"jobName":"paragraph_1497979370295_-16356924","id":"20170620-182250_1617757207","dateCreated":"2017-06-20T18:22:50+0100","dateStarted":"2017-06-21T12:28:17+0100","dateFinished":"2017-06-21T12:28:18+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2094"},{"text":"%pyspark\nfrom dateutil import parser\ncutoff = \"2017-05-01 00:00:00 UTC\"\nbegin_from = parser.parse(cutoff)\n#print begin_from.strftime('%Y-%m-%d')\n# test = latest_classifications.filter(lambda e: parser.parse(e.created_at)).collect()\n# print test\n\nrecent_classifications = latest_classifications.filter(lambda e: parser.parse(e.created_at) >= begin_from)\n#print recent_classifications.count()\n#recent_classifications.takeSample(False, 1, 2)\n\nfrom operator import add\n# subject_counts = latest_classifications.map(lambda e: (e.subject_ids, 1)).reduceByKey(lambda subject_ids, count: subject_ids + count).countByKey()\nsubject_counts = latest_classifications.map(lambda e: (e.subject_ids, 1)).reduceByKey(add).collect()\nsubject_votes = latest_classifications.map(lambda e: (e.subject_ids, e.yes_no)).reduceByKey(add).collect()\n\nprint subject_counts\n# print subject_votes\n\n# TODO: join the lists on the subject key then do the the yes_no_counts / votes calc.","user":"anonymous","dateUpdated":"2017-06-21T12:29:15+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[(4182528, 1), (4178944, 1), (4170244, 1), (1309680, 1), (4178244, 1), (4172300, 1), (4171864, 1), (4178824, 1), (1311252, 1), (4184600, 1), (4180484, 1), (6612948, 1), (4183072, 1), (1312072, 1), (4168476, 1), (4182056, 1), (1311068, 1), (4180632, 1), (4186668, 1), (6607920, 1), (1512712, 1), (4174904, 1), (1312316, 1), (4175160, 1), (4178016, 1), (4185156, 1), (4175416, 1), (1308232, 1), (4172556, 1), (4181656, 1), (4176460, 1), (4175440, 1), (4178792, 1), (4167252, 1), (1512024, 1), (6609764, 1), (6607000, 1), (1308516, 1), (4171360, 1), (4172388, 1), (4184680, 1), (1311164, 1), (4177256, 1), (4173940, 1), (4179032, 1), (6620692, 1), (4180604, 1), (6614588, 1), (6608512, 1), (4166848, 1), (4169208, 1), (4179312, 1), (4182152, 1), (1512072, 1), (6579852, 1), (4172948, 1), (1513112, 1), (1313180, 1), (4175516, 1), (1311708, 1), (4173472, 1), (1512816, 1), (1512840, 1), (6612132, 1), (4179740, 1), (4175532, 1), (6609076, 2), (6606520, 1), (4174964, 1), (4184200, 1), (4168384, 1), (6613536, 1), (1309380, 1), (4180680, 1), (6609356, 1), (6607052, 1), (4184784, 1), (1310936, 1), (4186264, 1), (4185820, 1), (6580448, 1), (4174564, 1), (6609128, 1), (6580460, 1), (6607600, 1), (6607604, 1), (6607608, 1), (4178388, 1), (4171552, 1), (4167936, 1), (1309960, 1), (4186156, 1), (4166924, 1), (1311192, 1), (4176156, 1), (1309976, 1), (6616860, 1), (4182328, 1), (4170820, 1), (4186672, 1), (4184732, 1), (4174300, 1), (4169152, 1), (4167560, 1), (1311540, 1), (6618396, 1), (1312060, 1), (4173112, 1), (1308980, 1), (4169532, 1), (6608184, 1), (4172608, 1), (1512260, 1), (1310536, 1), (4184396, 1), (4167224, 1), (4174164, 1), (1313112, 1), (4175196, 1), (1312096, 1), (4178320, 1), (1309028, 1), (4179432, 1), (4172084, 1), (4186472, 1), (4185916, 1), (1309548, 1), (4178800, 1), (6608360, 1), (4168564, 1), (4175736, 1), (1309556, 1), (6615176, 1), (4185792, 1), (1309568, 1), (4180132, 1), (1312540, 1), (1313160, 1), (1313168, 1), (1309848, 1), (1512852, 1), (4186692, 1), (4168604, 1), (6580128, 1), (1310836, 1), (4178360, 1), (1307972, 1), (4171420, 1), (6608304, 1), (6613320, 1), (4182964, 1), (4179164, 1), (4175288, 1), (4174780, 1), (1312704, 1), (4176264, 1), (1513416, 1), (6617420, 1), (1310360, 1), (1310668, 1), (1309432, 1), (1309140, 1), (6609368, 1), (4185764, 1), (4173920, 1), (1312732, 1), (4176976, 1), (6617576, 1), (4166124, 1), (4177392, 1), (1513124, 1), (6580212, 1), (4174684, 1), (1512440, 1), (6607956, 1), (4186108, 1), (4176897, 1), (4177413, 1), (1309193, 1), (4182957, 1), (4186513, 1), (6617105, 3), (1309205, 1), (4170709, 1), (1312797, 1), (1308677, 1), (4173857, 1), (6621221, 1), (1513137, 1), (4170281, 1), (1311693, 1), (1309985, 1), (1311301, 1), (4174941, 1), (1310257, 1), (1307961, 1), (1309237, 1), (4172041, 1), (4167225, 1), (6617661, 1), (1309365, 1), (4173377, 1), (4182085, 1), (1312097, 1), (4175629, 1), (1309265, 1), (6606933, 1), (4166125, 1), (6612573, 1), (4181089, 1), (1311729, 1), (6609509, 1), (4185617, 1), (4180937, 1), (1513581, 1), (4186813, 1), (4172913, 1), (6613309, 1), (6613625, 1), (4171901, 1), (6609541, 1), (6607809, 1), (6606985, 1), (4172537, 1), (1313421, 1), (4170905, 1), (1310149, 1), (6617761, 1), (6609009, 1), (4174505, 1), (4186825, 1), (4183725, 1), (1312029, 1), (1310897, 1), (4174533, 1), (1312437, 1), (1312713, 1), (1310393, 1), (1309373, 1), (1310069, 1), (6616769, 1), (4178629, 1), (4180769, 1), (6606537, 1), (4171469, 1), (4172237, 1), (1311953, 1), (1308613, 1), (4171261, 1), (1308893, 1), (1313097, 1), (6618405, 1), (4180193, 1), (6620901, 1), (4171985, 1), (6606569, 1), (1513197, 1), (1311869, 1), (1512177, 1), (4166901, 1), (1512697, 1), (4185401, 1), (4174589, 1), (1313405, 1), (919809, 1), (4168577, 1), (1513737, 1), (4177673, 1), (1310989, 1), (6608173, 1), (1512721, 1), (1307929, 1), (4177861, 1), (6616493, 2), (4178717, 1), (4176517, 1), (1307937, 1), (4176677, 1), (4176173, 1), (1309489, 1), (6579729, 1), (6608185, 1), (4178749, 1), (4175925, 1), (1313089, 1), (4181221, 1), (4167493, 1), (1307977, 1), (6609105, 1), (1307981, 1), (1307901, 1), (4186681, 1), (6620505, 1), (1310557, 1), (1308645, 1), (6621025, 1), (1513829, 1), (4175937, 1), (4179345, 1), (4183401, 1), (1311037, 1), (1312625, 1), (4182389, 1), (1311613, 1), (4183425, 1), (6618569, 1), (4184965, 1), (6607425, 1), (6609801, 1), (4171757, 1), (6617489, 1), (6612373, 1), (1310273, 1), (1310105, 1), (4174285, 1), (4174749, 1), (1309253, 1), (6607777, 1), (4174577, 1), (6608301, 1), (1310133, 1), (1512265, 1), (1310649, 1), (6610365, 1), (6580161, 1), (4179909, 1), (1309857, 1), (4176841, 1), (4177869, 1), (1309653, 1), (4170233, 1), (4181977, 1), (1310685, 1), (1311201, 1), (4183545, 1), (4168369, 1), (4184037, 1), (1310289, 1), (4172777, 1), (4173805, 1), (6579709, 1), (1308861, 1), (4185405, 1), (4170469, 1), (4169205, 1), (6608437, 1), (1313273, 1), (4176893, 1), (6579901, 1), (4183554, 1), (1307958, 1), (1307990, 1), (6580742, 1), (4171254, 1), (1310218, 1), (1311334, 1), (6606862, 1), (4182190, 1), (4175386, 1), (6606370, 1), (4172670, 1), (1312294, 1), (4170198, 1), (6608426, 1), (1308850, 1), (1312682, 1), (4167730, 1), (4168306, 1), (4174390, 1), (1310266, 1), (4177598, 1), (4182594, 1), (4167246, 1), (4178514, 1), (4182926, 1), (1310990, 1), (6606934, 1), (4171734, 1), (4172474, 1), (4175970, 1), (4170854, 1), (4178022, 1), (6619378, 1), (1311858, 1), (4182206, 1), (6619254, 1), (4173434, 1), (4179306, 1), (1309822, 1), (4170866, 1), (1311370, 1), (1309838, 1), (4175214, 1), (4174102, 1), (4178074, 1), (1312690, 1), (4174494, 1), (4177058, 1), (4181318, 1), (4182214, 1), (4166310, 1), (1311402, 1), (6609522, 3), (1308334, 1), (6579878, 2), (4176562, 1), (4186806, 1), (4186810, 1), (1308862, 1), (6615746, 1), (4172914, 1), (1513670, 1), (1309874, 1), (1310198, 1), (1308874, 1), (1311950, 1), (4167378, 1), (1309738, 1), (1311722, 1), (6607190, 1), (4174790, 1), (1308378, 1), (4173022, 1), (1312006, 1), (4177446, 1), (1311462, 1), (4173034, 1), (1309422, 1), (1311986, 1), (1308542, 1), (6620406, 1), (1310970, 1), (4169830, 1), (4173054, 1), (4185558, 1), (4177158, 1), (1312010, 1), (4177166, 1), (1310994, 1), (6616854, 1), (4166938, 1), (6580510, 1), (4171178, 1), (4167458, 1), (6615846, 1), (1309482, 1), (6619538, 1), (4168414, 1), (4184374, 1), (6615726, 1), (4185914, 1), (4172094, 1), (4180914, 1), (4181562, 1), (4183350, 1), (4183878, 1), (1309070, 1), (1513630, 1), (1309350, 1), (4176210, 1), (1311630, 1), (4167510, 1), (6619482, 1), (4173370, 1), (1308510, 1), (6606770, 1), (4179142, 1), (1310186, 1), (1513826, 1), (4185382, 1), (6621030, 1), (1308010, 1), (1312658, 1), (6614894, 1), (4174778, 1), (4183410, 1), (6609270, 1), (4178810, 1), (4176618, 1), (4184958, 1), (4175234, 1), (6620554, 1), (4177986, 1), (4186510, 1), (6608306, 1), (6608630, 1), (1513362, 1), (1309166, 1), (6580118, 1), (4184054, 1), (1512858, 1), (4184218, 1), (1308574, 1), (4174558, 1), (1512262, 1), (6608806, 2), (4168182, 1), (1308074, 1), (4180210, 1), (4175790, 1), (6613166, 1), (6618034, 1), (6616734, 1), (1312678, 1), (4169146, 1), (4177342, 1), (6608322, 3), (4185078, 1), (1310150, 1), (4179406, 1), (4185130, 1), (4181974, 1), (4184314, 1), (4169182, 1), (4171174, 1), (4181994, 1), (4168174, 1), (4176882, 1), (4176886, 1), (4178426, 1), (1312170, 1), (4170674, 1), (1312527, 1), (6618115, 1), (4177415, 1), (4182027, 1), (6608399, 1), (4175363, 1), (4171283, 1), (6609555, 1), (1311767, 1), (4182447, 1), (4168223, 1), (4181027, 1), (4168135, 1), (6606879, 2), (4175415, 1), (4182059, 1), (4186671, 1), (6608499, 1), (4178487, 1), (4167227, 1), (6619715, 2), (4168775, 1), (4177011, 1), (4179023, 1), (1513043, 1), (4178519, 1), (4174863, 1), (1311439, 1), (1310819, 1), (1311371, 1), (4178023, 1), (4186219, 1), (1312991, 1), (4173935, 1), (4168819, 1), (6579831, 1), (1312379, 1), (1311423, 1), (6612099, 1), (1512123, 1), (4172939, 1), (1308099, 1), (4168335, 1), (1313219, 2), (6607995, 1), (6609423, 1), (4183875, 1), (4172955, 1), (4182443, 1), (4169179, 1), (1307807, 2), (4175027, 1), (1309863, 1), (1512755, 1), (4176839, 1), (6612143, 1), (4179635, 1), (1313263, 1), (1312951, 1), (6619159, 1), (1309883, 1), (1310911, 1), (4178123, 1), (6580427, 1), (4168911, 1), (4178027, 1), (6610107, 1), (4166359, 1), (1309647, 1), (4175071, 1), (4184699, 1), (6580455, 1), (6610227, 1), (4178667, 1), (4183791, 1), (4174291, 1), (4184823, 1), (6606903, 1), (4167931, 1), (1308887, 1), (1308415, 1), (4176343, 1), (1309451, 1), (4184523, 1), (1512207, 3), (4186755, 1), (4183831, 1), (4181787, 1), (4178139, 1), (4179447, 1), (6607863, 1), (1307947, 1), (1310099, 2), (4177623, 1), (1513775, 1), (1313075, 1), (4175975, 1), (6608183, 1), (1309963, 1), (4184119, 1), (1312367, 1), (4178243, 1), (1313095, 1), (4170615, 1), (1311799, 2), (1310731, 1), (6580563, 1), (6609751, 1), (4183899, 1), (6580067, 1), (1311587, 1), (4186763, 1), (1309419, 1), (1307987, 1), (1310059, 1), (4176551, 1), (6612115, 1), (1312631, 1), (6616591, 1), (4182395, 1), (6606827, 1), (4179467, 1), (4184451, 1), (4179335, 1), (4170295, 1), (1310315, 1), (6613523, 1), (6609299, 1), (4173207, 1), (6616899, 1), (4168431, 1), (4174751, 1), (1310631, 1), (6607083, 1), (4185003, 1), (4169135, 1), (4185879, 1), (4166131, 1), (4177099, 1), (4173751, 1), (4185095, 1), (1312699, 1), (6618571, 1), (4180927, 1), (4173763, 1), (4180935, 1), (4170587, 1), (4179299, 1), (6609359, 1), (1310163, 1), (6609879, 1), (1310683, 1), (6620635, 1), (4170207, 1), (4186595, 1), (4167659, 1), (4171759, 1), (6580211, 1), (4186615, 1), (4182015, 1), (4171407, 1), (4186623, 1)]\n"}]},"apps":[],"jobName":"paragraph_1497990016910_-377933658","id":"20170620-212016_643423974","dateCreated":"2017-06-20T21:20:16+0100","dateStarted":"2017-06-21T12:29:15+0100","dateFinished":"2017-06-21T12:29:16+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2095"},{"text":"%pyspark\n\n# test = recent_classifications.map(lambda e: e.answer = 1 if e.annotations['value'] == \"No\" else 0)\n# print test.first()\n\n# final step - figure out how to create the percent of total votes\n# as per Ali's R code\n#      mutate(., answer = ifelse(value == \"No\", 0, 1)) %>%\n#      group_by(., subject_ids, workflow_id, workflow_name, workflow_version) %>%\n#      summarise(., total_votes = n(), total_yes = sum(answer), prop_yes = sum(answer)/n()) %>%\n#      mutate(., keep = as.factor(ifelse(prop_yes > 0.45, \"T\", \"F\")))\n# latest_classifications.groupBy(lambda e: e.subject_ids).agg(count(\"*\").alias(\"total\"), sum($\"flag\").alias(\"with_flag\"),mean($\"flag\").multiply(100).cast(\"integer\").alias(\"percentage\"))\n","user":"anonymous","dateUpdated":"2017-06-21T11:49:06+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1497991219888_980726911","id":"20170620-214019_1705345326","dateCreated":"2017-06-20T21:40:19+0100","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:2096"}],"name":"classifiation_pandas_spark","id":"2CJ4DG98R","angularObjects":{"2CH63AEJ8:shared_process":[],"2CM6RJKHJ:shared_process":[],"2CHRCW21W:shared_process":[],"2CGGHTD9K:shared_process":[],"2CJPSAEUU:shared_process":[],"2CJEW3NYV:shared_process":[],"2CKKY6N3Q:shared_process":[],"2CH41CTUY:shared_process":[],"2CKAECKF5:shared_process":[],"2CGFWT3RU:shared_process":[],"2CHC9D65Q:shared_process":[],"2CM7A2D23:shared_process":[],"2CJR5CM84:shared_process":[],"2CM3MNDHB:shared_process":[],"2CJXJ2MF9:shared_process":[],"2CH1MZU8H:shared_process":[],"2CGW8K5XC:shared_process":[],"2CKJYP655:shared_process":[],"2CH2N66MA:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}